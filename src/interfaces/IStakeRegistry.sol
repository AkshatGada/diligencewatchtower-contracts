// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.15;

import {IStrategy} from "eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol";

/**
 * @title Interface for a `Registry` that keeps track of stakes of operators
 * @author Witness Chain
 */
interface IStakeRegistry {
    
    // DATA STRUCTURES
    struct StrategyStakeAmount {
        IStrategy strategy;
        uint256 stakeAmount;
    }  
  
    /// @notice struct used to store the different stake plans configured by 
    //  the Rollups in configuring the minimumStakeAmount 
    struct StakePlan {
        // unique number generated by the contract to track the StakePlan
        uint16 planID;
        // chain ID that needs to be watched
        uint256 chainID;
        // blockNumber when the minimumStakeAmount was last updated
        uint256 blockNumber; 
        // minimumStrategyStakeAmount required from an operator for participation 
        // into the witnesschain operator network
        StrategyStakeAmount[] minimumStrategyStakeAmounts;
    }

    /// @notice struct used to store holds different strategies that the 
    //  Operator has it's stakes on (source from EigenLayer)
    struct OperatorStake {
        // blockNumber when the stakes were last updated
        uint256 blockNumber; 
        // strategies that the operator has staked inside EigenLayer 
        mapping (IStrategy => uint256) strategyAmounts;
    }

    /// @notice struct used to store the Operator Address and the StakePlans 
    //  that the Operator wants to sign up for.
    struct OperatorStakePlan {
        // chain ID that needs to be watched
        address operatorAddress;
        // blockNumber when the stakes were last updated
        uint256 blockNumber; 
        // StakePlans that the operator has signed up for
        StakePlan[] stakePlans;
    }

    // event when operator shares of a strategy sees an increase
    event SharesIncreased(address, IStrategy, uint256);

    // event when operator shares of a strategy sees a decrease
    event SharesDecreased(address, IStrategy, uint256);

/*******************************************************************************
                      EXTERNAL FUNCTIONS
*******************************************************************************/

    /**
     * @notice Adds the stake plan for a particular Chain ID.
     * @param chainID chainID for which the StakePlan has to be recorded
     * @param blockNumber blockNumber when the minimumStakeAmount was last updated
     * @param minimumStrategyStakeAmounts minimumStrategyStakeAmount required 
     *        from an operator for participation into the witnesschain operator network
     * @return plan_id minimumStrategyStakeAmount required 
     *        from an operator for participation into the witnesschain operator network
     * @dev access restricted to the owner
     * @dev Preconditions (these are assumed, not validated in this contract):
     *         1) `chainID` is a valid Chain ID
     *         2) `blockNumber` is a valid blockNumber in the specific chain iD
     */
    function addStakePlan(  
        uint256 chainID, 
        uint256 blockNumber,
        StrategyStakeAmount[] memory minimumStrategyStakeAmounts
    ) external returns (uint16);

/*******************************************************************************
                      EXTERNAL FUNCTIONS
*******************************************************************************/

    /**
     * @notice Operators opt-in to the Stake Plan(s) when they register
     * @param operatorAddress Address
     * @param planIDs Stake plan ids to be opted-in
     * @param blockNumber blockNumber when the minimumStakeAmount was last updated
     * @dev Preconditions (these are assumed, not validated in this contract):
     *         1) `planIDs` are valid Stake Plan
     *         2) `blockNumber` is a valid blockNumber in the specific chain iD
     */
    function operatorOptInStakePlans(  
        address operatorAddress,
        uint16[] memory planIDs,
        uint256 blockNumber
    ) external ;

/*******************************************************************************
                      EXTERNAL FUNCTIONS
*******************************************************************************/

    /**
     * @notice Update operator stakes from EigenLayer
     * @param operatorAddress Address of the operator
     * @param blockNumber blockNumber when the stakes were last updated
     * @param strategyAmounts Stake amounts when the strategies were last updated
     * @dev Preconditions (these are assumed, not validated in this contract):
     *        1) `operatorAddress` is a valid EigenLayer Address in the specific chain iD
     *        2) `blockNumber` is a valid blockNumber in the specific chain iD
     */
    function updateOperatorStakes(  
        address operatorAddress,
        uint256 blockNumber,
        StrategyStakeAmount[] memory strategyAmounts
    ) external ;

    /**
     * @notice Update operator stakes from EigenLayer, when stakes are increased
     * @param operatorAddress Address of the operator
     * @param strategy that is in regards to
     * @param shares gain 
     * @dev Preconditions (these are assumed, not validated in this contract):
     *        1) `operatorAddress` is a valid EigenLayer Address and Witness Chain in the specific chain iD
     *        2) `blockNumber` is a valid blockNumber in the specific chain iD
     */
    function operatorShareIncreased(
        address operatorAddress,
        IStrategy strategy,
        uint256 shares
    ) external ;

    /**
     * @notice Update operator stakes from EigenLayer, when stakes are decreased
     * @param operatorAddress Address of the operator
     * @param strategy that is in regards to
     * @param shares loss 
     * @dev Preconditions (these are assumed, not validated in this contract):
     *        1) `operatorAddress` is a valid EigenLayer Address and Witness Chain in the specific chain iD
     *        2) `blockNumber` is a valid blockNumber in the specific chain iD
     */
    function operatorShareDecreased(
        address operatorAddress,
        IStrategy strategy,
        uint256 shares
    ) external ;

}